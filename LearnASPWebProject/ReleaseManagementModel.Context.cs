//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LearnASPWebProject
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DBReleaseManagementEntities : DbContext
    {
        public DBReleaseManagementEntities()
            : base("name=DBReleaseManagementEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<tbLogin> tbLogins { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<Project> Projects { get; set; }
        public virtual DbSet<TeamLeader> TeamLeaders { get; set; }
    
        public virtual ObjectResult<Check_Login_Result> Check_Login(string uname, string pass)
        {
            var unameParameter = uname != null ?
                new ObjectParameter("uname", uname) :
                new ObjectParameter("uname", typeof(string));
    
            var passParameter = pass != null ?
                new ObjectParameter("pass", pass) :
                new ObjectParameter("pass", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Check_Login_Result>("Check_Login", unameParameter, passParameter);
        }
    
        public virtual int proc_InsertUser(string uname, string pass, string urole)
        {
            var unameParameter = uname != null ?
                new ObjectParameter("uname", uname) :
                new ObjectParameter("uname", typeof(string));
    
            var passParameter = pass != null ?
                new ObjectParameter("pass", pass) :
                new ObjectParameter("pass", typeof(string));
    
            var uroleParameter = urole != null ?
                new ObjectParameter("urole", urole) :
                new ObjectParameter("urole", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_InsertUser", unameParameter, passParameter, uroleParameter);
        }
    
        public virtual ObjectResult<Check_Project_Result> Check_Project(string projectID, string projectName)
        {
            var projectIDParameter = projectID != null ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(string));
    
            var projectNameParameter = projectName != null ?
                new ObjectParameter("ProjectName", projectName) :
                new ObjectParameter("ProjectName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Check_Project_Result>("Check_Project", projectIDParameter, projectNameParameter);
        }
    
        public virtual ObjectResult<Check_TL_Result> Check_TL(string tLId, string tLName)
        {
            var tLIdParameter = tLId != null ?
                new ObjectParameter("TLId", tLId) :
                new ObjectParameter("TLId", typeof(string));
    
            var tLNameParameter = tLName != null ?
                new ObjectParameter("TLName", tLName) :
                new ObjectParameter("TLName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Check_TL_Result>("Check_TL", tLIdParameter, tLNameParameter);
        }
    
        public virtual int proc_Assign_pro_to_TL(string projectID, string projectname, string teamLeadID, string teamLeadname)
        {
            var projectIDParameter = projectID != null ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(string));
    
            var projectnameParameter = projectname != null ?
                new ObjectParameter("Projectname", projectname) :
                new ObjectParameter("Projectname", typeof(string));
    
            var teamLeadIDParameter = teamLeadID != null ?
                new ObjectParameter("TeamLeadID", teamLeadID) :
                new ObjectParameter("TeamLeadID", typeof(string));
    
            var teamLeadnameParameter = teamLeadname != null ?
                new ObjectParameter("TeamLeadname", teamLeadname) :
                new ObjectParameter("TeamLeadname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_Assign_pro_to_TL", projectIDParameter, projectnameParameter, teamLeadIDParameter, teamLeadnameParameter);
        }
    
        public virtual int proc_InsertEmployee(string employeeId, string employeename, string emp_role)
        {
            var employeeIdParameter = employeeId != null ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(string));
    
            var employeenameParameter = employeename != null ?
                new ObjectParameter("Employeename", employeename) :
                new ObjectParameter("Employeename", typeof(string));
    
            var emp_roleParameter = emp_role != null ?
                new ObjectParameter("Emp_role", emp_role) :
                new ObjectParameter("Emp_role", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_InsertEmployee", employeeIdParameter, employeenameParameter, emp_roleParameter);
        }
    
        public virtual int proc_InsertProject(string projectID, string projectname)
        {
            var projectIDParameter = projectID != null ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(string));
    
            var projectnameParameter = projectname != null ?
                new ObjectParameter("Projectname", projectname) :
                new ObjectParameter("Projectname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_InsertProject", projectIDParameter, projectnameParameter);
        }
    
        public virtual ObjectResult<proc_View_Projects_Result> proc_View_Projects()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_View_Projects_Result>("proc_View_Projects");
        }
    
        public virtual ObjectResult<proc_View_TeamLeads_Result> proc_View_TeamLeads()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_View_TeamLeads_Result>("proc_View_TeamLeads");
        }
    
        public virtual int proc_InsertTL(string tLID, string tLname)
        {
            var tLIDParameter = tLID != null ?
                new ObjectParameter("TLID", tLID) :
                new ObjectParameter("TLID", typeof(string));
    
            var tLnameParameter = tLname != null ?
                new ObjectParameter("TLname", tLname) :
                new ObjectParameter("TLname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_InsertTL", tLIDParameter, tLnameParameter);
        }
    }
}
